1. if i were actually taking this story from someone, I'd ask for clarity on 'Can I play a different game each time?'
 - I'm going to assume this means that each game has a different outcome (ie testing for randomness) rather than that you get to
   choose whether to play player/computer or computer/computer each time

2. 'Doesn't necessarily need a flashy GUI' -> commandline (minimum viable product...)

Test steps for first acceptance criteria:
1. player can select rock, paper or scissors
2. computer randomly selects one of rock, paper or scissors
3. determine winner by applying rules
    rock > scissors
    scissors > paper
    paper > rock
4. announce winner


-------
Mocking out the input/output is my preferred way of dealing with commandline TDD but mockito/the nature of buffered streams puts you
in a position where you kinda have to queue all your input and output up as in my current tests... i don't think it's too opaque so
I'm not going to worry about it unless I have to, but the next option would break out a class responsible for UI that prompts for feedback
and returns the input, then I could write the tests in a more user-like format :
expect this prompt
enter this text
expect this feedback
etc.

On the other hand, I quite like the completely deterministic nature of saying "if i give you this stream of inputs, this is the stream
of outputs I expect back".

Be interesting to see how that stands up to the bit where I have to test randomness, but one step at a time...
-------

1. all tests in one class - refactor to get a clear set of unit-tests, should leave the acceptance tests nice and clear
2. i was cheeky re-using the 'HumanPlayer' class to play the part of the observer... and I had to 'change the world' to do it - refactor all
   the messages so they fit what I could readily do the way I wanted to refactor towards. That doesn't feel right; I can get away with it
   because I invented the text anyway, but it feels a bit 'dirty' anyway.
   Worth breaking out some kind of Observer interface?
3. //TODO refactor the actual Game code; use the fact that we've got a list of things that we want to inform about each event, rather than paste together the bits that work...
4. something in the back of my mind tells me that I don't need to have a 'builder' for my Selection enum, isn't there some cheap opposite of toString for enums?? google it..
